## For BRC Prashant email ##

Log in: ssh psharma@brc3.secure.biotech.wisc.edu 
Password: +texErax3Ve@

Important: you need to VPN in or be on the UWNet Wifi, or it won't let you log in.
to connect to UW VPN servive go to /opt/paloaltonetworks/globalprotect and execute the globalprotect aplication

globalprotect connect --portal uwmadison.vpn.wisc.edu

type username and passoword

To copy from local to remote:
scp [your local file] psharma@brc3.secure.biotech.wisc.edu:/home/BIOTECH/psharma/Luciano/[your remote folder]

To copy from remote to local:
scp psharma@brc3.secure.biotech.wisc.edu:/home/BIOTECH/psharma/Luciano/[your remote file] [your local folder]  

## TMUX ##

To make a new tmux session called "MySession": 
tmux new -s MySession

To disconnect from the tmux session so you can close your computer, type "control+b" and then "d"

To attach to the tmux session to check on your run, type:
tmux a -t MySession

BEAST on BRC about 3h/millionGen [runs a lot faster on Cipres, only 24min/millonGen]

## Beast version 2.5.1 ##
at:
/home/BIOTECH/psharma/local/beast/bin

create a beauti file on your computer and try to run with beast from BRC

to run beast from terminal
(extracted from Beast homepage)

/home/BIOTECH/psharma/local/beast/bin/beast -working -prefix AssamBEASTuni  beast.xml

BEAST arguments:

-window         "Provide a console window"

-options        "Display an options dialog"

     -working        "Change working directory to input file's directory"

-seed           "Specify a random number generator seed"

     -prefix         "Specify a prefix for all output log filenames"

-overwrite      "Allow overwriting of log files"

-errors         "Specify maximum number of numerical errors before stopping"

-threads        "The number of computational threads to use (default auto)"

-java           "Use Java only, no native implementations"

-beagle         "Use beagle library if available"

-beagle_info          "BEAGLE: show information on available resources"

-beagle_order         "BEAGLE: set order of resource use"

-beagle_instances     "BEAGLE: divide site patterns amongst instances"

-beagle_CPU           "BEAGLE: use CPU instance"

-beagle_GPU           "BEAGLE: use GPU instance if available"

-beagle_SSE           "BEAGLE: use SSE extensions if available"

-beagle_single        "BEAGLE: use single precision if available"

-beagle_double        "BEAGLE: use double precision if available"

-beagle_scaling       "BEAGLE: specify scaling scheme to use"

-help"                "Print this information and stop"

Assuming BEAST is installed in your home directory (as ~/beast), you can call BEAST programs from a terminal using

~/beast/bin/beast -threads 4 beast.xml

to start BEAST on beast.xml with 4 threads. If you have BEAST installed in a different location, you need to replace ~/beast with the location where beast can be found. All programs (applauncher, beast, beauti, densitree, loganalyser, logcombiner, packagemanager, and treeannotator) are in the bin folder, and can be started likewise, for example

~/beast/bin/applauncher BModelAnalyser -file beast.log

to run BModelAnalyser on file beast.log, or

~/beast/bin/packagemanager -add bModelTest

to install the bModelTest package.
Increasing memory after a java.lang.OutOfMemoryError on Linux

To increase memory available to BEAST or any of the other program you can use the -Xmx directive for java. For example, to allocate 16GB of memory for BEAST, use

java -Xmx16g -jar ~/beast/lib/launcher.jar -threads 4 beast.xml

You can also edit the scripts in the bin directory and call the script instead. Note, there will be two places to update.

## Phylobayes 4.1c ##
at:
/home/BIOTECH/psharma/local/phylobayes4.1c/data

usage

pb -f -d Opiliones005.phy -T Assamiidae005_besttree.newick -x 10 -dgam 4 -gtr -cat -covarion -gbl Assam005partitions assam005pb

/home/BIOTECH/psharma/local/phylobayes4.1c/data/pb -f -d Opiliones005.phy -T Assamiidae005_besttree.newick -gtr -cat -covarion -gbl Assam005partitions assam005pb
## Qiime 2 microbiome search ##
# before you start
The first spet for a analisys with qiime is make sure you have conda installed.
then create a new environment. Pay attention on the phyton version to install the right miniconda version.

conda create --name [environment name]

then you have to activate it defore star working on qiime

conda activate [environment name]

after that qiime should work just fine. 

To start the analysis make sure all the files and folders are in place. 
You will need one folder with the raw reads on it before importing the data to qiime
# importing files
to import Multiplexed paired-end FASTQ with barcodes in sequence follow the recomendations below.

Users with multiplexed paired-end barcodes in sequence reads should have:

one forward.fastq.gz file, containing forward reads from multiple samples,
one reverse.fastq.gz file, containing reverse reads from the same samples,
one metadata file with a column of per-sample barcodes for use in FASTQ demultiplexing (or two columns of dual-index barcodes)

In this format, sequence data is still multiplexed
(i.e. you have only one forward and one reverse fastq.gz file containing raw data for all of your samples)

**Because you are importing a multi-file directory, the filenames forward.fastq.gz and reverse.fastq.gz are required

The order of the records in the fastq.gz files defines the association between forward and reverse sequence reads,
so a correct order must be preserved.

Barcodes in the metadata mapping file are not required to be in any specific order.
it is good pratice to validate the metadata file on google sheets using KEEMEI aad-on
If you use Keemei for any published research, please include the following citation:

* Keemei: cloud-based validation of tabular bioinformatics file formats in Google Sheets. Rideout JR, Chase JH, Bolyen E, Ackermann G, Gonz√°lez A, Knight R, Caporaso JG. GigaScience. 2016;5:27. http://dx.doi.org/10.1186/s13742-016-0133-6

run:

qiime tools import --type MultiplexedPairedEndBarcodeInSequence --input-path [your folder path] --output-path multiplexed-seqs.qza

or (for demultiplexed cassava format)

qiime tools import --type 'SampleData[PairedEndSequencesWithQuality]' --input-path ./demultiplexed --input-format CasavaOneEightSingleLanePerSampleDirFmt --output-path demux.qza

## demultplexing ##

You next can demultiplex the sequence reads.
This requires the sample metadata file, and you must indicate which column in that file contains the per-sample barcodes.
In this case, that column name is [barcode-sequence].
After demultiplexing, we can generate and view a summary of how many sequences were obtained per sample.

run: (didnt worked. there was bug on the cutadapt script that was reading the header of the first column as the sequence name. This caused a not a IUPAC character **(name of the colunm)** being read as the the first barcode.

qiime cutadapt demux-paired --i-seqs multiplexed-seqs.qza --m-forward-barcodes-file RADmetamasius_metadata.tsv --m-forward-barcodes-column barcode-sequence --m-reverse-barcodes-file RADmetamasius_metadata.tsv --m-reverse-barcodes-column barcode-sequence --p-error-rate 0 --p-batch-size 2 --o-per-sample-sequences demultiplexed-seqs.qza --o-untrimmed-sequences untrimmed.qza --verbose

So I used cutadapt outside qiime to demultiplex the sequences

cutadapt -e 0.15 --no-indels --cores=0 --discard-untrimmed -g file:barcode_file.fasta -o "qquer-nome.fastq.gz" input_file.fastq.gz

cutadapt -e 0.15 --no-indels --cores=0 --discard-untrimmed -g file:barcode_file.fasta -o "forward-{name}.fastq.gz" input_file.fastq.gz
cutadapt -e 0.15 --no-indels --cores=0 --discard-untrimmed -g file:barcode_file.fasta -o "reverse-{name}.fastq.gz" input_file.fastq.gz



* trimming adapters (if necessary)

$ qiime cutadapt trim-paired --i-demultiplexed-sequences demultiplexed-seqs.qza --p-front GCTACGGGGGG --p-error-rate 0 --o-trimmed-sequences trimmed-seqs.qza --verbose

**to import as single-end read**
qiime tools import --type MultiplexedSingleEndBarcodeInSequence --input-path ./reads --output-path multiplexed-seqs.qza

**to demultiplex**
qiime demux emp-single --i-seqs multiplexed-seqs.qza --m-barcodes-file RADmetamasius_metadata.tsv--m-barcodes-column barcode-sequence --o-per-sample-sequences demux.qza --o-error-correction-details demux-details.qza



* summarizing the demultiplexing output

qiime demux summarize --i-data demux-full.qza --o-visualization demux-full.qzv

qiime demux summarize --i-data trimmed-seqs.qza --o-visualization trimmed-seqs.qzv

qiime tools view trimmed-seqs.qzv


qiime demux summarize --i-data demux.qza --o-visualization demux.qzv

qiime tools export --input-path demux.qzv --output-path ./demux-summary/

